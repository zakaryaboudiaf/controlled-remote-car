
telecom_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800200  00800200  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d7f  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c57  00000000  00000000  000010cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000439  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002782  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	1d d0       	rcall	.+58     	; 0x140 <main>
 106:	98 c0       	rjmp	.+304    	; 0x238 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <ADC_init>:



void ADC_init(void)
{
	ADMUX |=(1<<REFS0);
 10a:	ec e7       	ldi	r30, 0x7C	; 124
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	80 83       	st	Z, r24
	ADCSRB |=(1<<MUX5);
 114:	eb e7       	ldi	r30, 0x7B	; 123
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADEN) |(1<<ADPS2)|(1<<ADPS1) |(1<<ADPS0) ;
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	87 68       	ori	r24, 0x87	; 135
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <USART_Init>:
	
}
void USART_Init (unsigned int ubrr )
{
	UBRR0H = (unsigned char)(ubrr>>8);                 // set baud rate
 12a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;                      // set baud rate
 12e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0) ;                   // enable reciver and transmitter
 132:	88 e1       	ldi	r24, 0x18	; 24
 134:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	UCSR0C = (3<<UCSZ00);                              // set frame format: 8data, 1stop bit
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 13e:	08 95       	ret

00000140 <main>:


int main(void)
{
	
	 ADC_init();
 140:	e4 df       	rcall	.-56     	; 0x10a <ADC_init>
	 USART_Init (MYUBRR);
 142:	89 e1       	ldi	r24, 0x19	; 25
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	f1 df       	rcall	.-30     	; 0x12a <USART_Init>
	 
	 
    while (1) 
    {
			ADMUX = 0b01000000;
 148:	4c e7       	ldi	r20, 0x7C	; 124
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	00 e4       	ldi	r16, 0x40	; 64
			ADCSRA |=(1<<ADSC);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
			while (( ADCSRA & (1<<ADSC)));
			x_axis = ( ADC/4);
 152:	28 e7       	ldi	r18, 0x78	; 120
 154:	30 e0       	ldi	r19, 0x00	; 0
			UDR0 = (uint8_t)x_axis;
 156:	0f 2e       	mov	r0, r31
 158:	f6 ec       	ldi	r31, 0xC6	; 198
 15a:	ef 2e       	mov	r14, r31
 15c:	f1 2c       	mov	r15, r1
 15e:	f0 2d       	mov	r31, r0
			while ( !( UCSR0A & (1<<UDRE0)) );
 160:	a0 ec       	ldi	r26, 0xC0	; 192
 162:	b0 e0       	ldi	r27, 0x00	; 0
		
			ADMUX = 0b01000001;
 164:	11 e4       	ldi	r17, 0x41	; 65
			while (( ADCSRA & (1<<ADSC)));
			y_axis = ( ADC/4);
			UDR0 = (uint8_t)y_axis;
			while ( !( UCSR0A & (1<<UDRE0)) );
			
			ADMUX = 0b01000010;
 166:	72 e4       	ldi	r23, 0x42	; 66
			x_servo = ( ADC/4);
			UDR0 = (uint8_t)x_servo;
			while ( !( UCSR0A & (1<<UDRE0)) );
		
			
			ADMUX = 0b01000011;
 168:	63 e4       	ldi	r22, 0x43	; 67
	 USART_Init (MYUBRR);
	 
	 
    while (1) 
    {
			ADMUX = 0b01000000;
 16a:	ea 01       	movw	r28, r20
 16c:	08 83       	st	Y, r16
			ADCSRA |=(1<<ADSC);
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
			while (( ADCSRA & (1<<ADSC)));
 174:	80 81       	ld	r24, Z
 176:	86 fd       	sbrc	r24, 6
 178:	fd cf       	rjmp	.-6      	; 0x174 <main+0x34>
			x_axis = ( ADC/4);
 17a:	e9 01       	movw	r28, r18
 17c:	88 81       	ld	r24, Y
 17e:	99 81       	ldd	r25, Y+1	; 0x01
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	96 95       	lsr	r25
 186:	87 95       	ror	r24
 188:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <x_axis+0x1>
 18c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <x_axis>
			UDR0 = (uint8_t)x_axis;
 190:	e7 01       	movw	r28, r14
 192:	88 83       	st	Y, r24
			while ( !( UCSR0A & (1<<UDRE0)) );
 194:	8c 91       	ld	r24, X
 196:	85 ff       	sbrs	r24, 5
 198:	fd cf       	rjmp	.-6      	; 0x194 <main+0x54>
		
			ADMUX = 0b01000001;
 19a:	ea 01       	movw	r28, r20
 19c:	18 83       	st	Y, r17
			ADCSRA |=(1<<ADSC);
 19e:	80 81       	ld	r24, Z
 1a0:	80 64       	ori	r24, 0x40	; 64
 1a2:	80 83       	st	Z, r24
			while (( ADCSRA & (1<<ADSC)));
 1a4:	80 81       	ld	r24, Z
 1a6:	86 fd       	sbrc	r24, 6
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <main+0x64>
			y_axis = ( ADC/4);
 1aa:	e9 01       	movw	r28, r18
 1ac:	88 81       	ld	r24, Y
 1ae:	99 81       	ldd	r25, Y+1	; 0x01
 1b0:	96 95       	lsr	r25
 1b2:	87 95       	ror	r24
 1b4:	96 95       	lsr	r25
 1b6:	87 95       	ror	r24
 1b8:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <y_axis+0x1>
 1bc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <y_axis>
			UDR0 = (uint8_t)y_axis;
 1c0:	e7 01       	movw	r28, r14
 1c2:	88 83       	st	Y, r24
			while ( !( UCSR0A & (1<<UDRE0)) );
 1c4:	8c 91       	ld	r24, X
 1c6:	85 ff       	sbrs	r24, 5
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <main+0x84>
			
			ADMUX = 0b01000010;
 1ca:	ea 01       	movw	r28, r20
 1cc:	78 83       	st	Y, r23
			ADCSRA |=(1<<ADSC);
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
			while (( ADCSRA & (1<<ADSC)));
 1d4:	80 81       	ld	r24, Z
 1d6:	86 fd       	sbrc	r24, 6
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <main+0x94>
			x_servo = ( ADC/4);
 1da:	e9 01       	movw	r28, r18
 1dc:	88 81       	ld	r24, Y
 1de:	99 81       	ldd	r25, Y+1	; 0x01
 1e0:	96 95       	lsr	r25
 1e2:	87 95       	ror	r24
 1e4:	96 95       	lsr	r25
 1e6:	87 95       	ror	r24
 1e8:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <x_servo+0x1>
 1ec:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <x_servo>
			UDR0 = (uint8_t)x_servo;
 1f0:	e7 01       	movw	r28, r14
 1f2:	88 83       	st	Y, r24
			while ( !( UCSR0A & (1<<UDRE0)) );
 1f4:	8c 91       	ld	r24, X
 1f6:	85 ff       	sbrs	r24, 5
 1f8:	fd cf       	rjmp	.-6      	; 0x1f4 <main+0xb4>
		
			
			ADMUX = 0b01000011;
 1fa:	ea 01       	movw	r28, r20
 1fc:	68 83       	st	Y, r22
			ADCSRA |=(1<<ADSC);
 1fe:	80 81       	ld	r24, Z
 200:	80 64       	ori	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
			while (( ADCSRA & (1<<ADSC)));
 204:	80 81       	ld	r24, Z
 206:	86 fd       	sbrc	r24, 6
 208:	fd cf       	rjmp	.-6      	; 0x204 <main+0xc4>
			y_servo = ( ADC/4);
 20a:	e9 01       	movw	r28, r18
 20c:	88 81       	ld	r24, Y
 20e:	99 81       	ldd	r25, Y+1	; 0x01
 210:	96 95       	lsr	r25
 212:	87 95       	ror	r24
 214:	96 95       	lsr	r25
 216:	87 95       	ror	r24
 218:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_edata+0x1>
 21c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
			UDR0 =(uint8_t)y_servo;
 220:	e7 01       	movw	r28, r14
 222:	88 83       	st	Y, r24
			while ( !( UCSR0A & (1<<UDRE0)) );
 224:	8c 91       	ld	r24, X
 226:	85 ff       	sbrs	r24, 5
 228:	fd cf       	rjmp	.-6      	; 0x224 <main+0xe4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22a:	8f e3       	ldi	r24, 0x3F	; 63
 22c:	9c e9       	ldi	r25, 0x9C	; 156
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0xee>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0xf4>
 234:	00 00       	nop
 236:	99 cf       	rjmp	.-206    	; 0x16a <main+0x2a>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
