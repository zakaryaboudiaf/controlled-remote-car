
robot_car_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800202  00800202  00000af0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d81  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c11  00000000  00000000  00001921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000552  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  00002b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000173  00000000  00000000  000030c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00003236  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5f c0       	rjmp	.+190    	; 0x124 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e5       	ldi	r30, 0x5A	; 90
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 30       	cpi	r26, 0x0A	; 10
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	83 d0       	rcall	.+262    	; 0x226 <main>
 120:	9a c4       	rjmp	.+2356   	; 0xa56 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__vector_25>:
uint16_t x_servo = 0;
uint16_t y_servo = 0;
uint8_t channel = 8;

ISR (USART0_RX_vect)
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	8f 93       	push	r24
 132:	9f 93       	push	r25
    uint16_t value = UDR0;    // Receive the data from the remote control.
 134:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 138:	90 e0       	ldi	r25, 0x00	; 0
	
	switch(channel)
 13a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 13e:	29 30       	cpi	r18, 0x09	; 9
 140:	a9 f0       	breq	.+42     	; 0x16c <__vector_25+0x48>
 142:	18 f4       	brcc	.+6      	; 0x14a <__vector_25+0x26>
 144:	28 30       	cpi	r18, 0x08	; 8
 146:	31 f0       	breq	.+12     	; 0x154 <__vector_25+0x30>
 148:	34 c0       	rjmp	.+104    	; 0x1b2 <__vector_25+0x8e>
 14a:	2a 30       	cpi	r18, 0x0A	; 10
 14c:	d9 f0       	breq	.+54     	; 0x184 <__vector_25+0x60>
 14e:	2b 30       	cpi	r18, 0x0B	; 11
 150:	29 f1       	breq	.+74     	; 0x19c <__vector_25+0x78>
 152:	2f c0       	rjmp	.+94     	; 0x1b2 <__vector_25+0x8e>
	{
	    case 8:
			x_axis = 4*value; // if channel = 8 store the received data on x-axis variable.
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <x_axis+0x1>
 160:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <x_axis>
			channel = 9;      // change the channel to 9. 
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		    break;
 16a:	23 c0       	rjmp	.+70     	; 0x1b2 <__vector_25+0x8e>
		
		case 9:
			y_axis = 4*value; // if channel = 9 store the received data on x-axis variable.
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <y_axis+0x1>
 178:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <y_axis>
			channel = 10;     // change the channel to 10.
 17c:	8a e0       	ldi	r24, 0x0A	; 10
 17e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		    break;
 182:	17 c0       	rjmp	.+46     	; 0x1b2 <__vector_25+0x8e>
			
		case 10:
			x_servo = 4*value; // if channel = 10 store the received data on x-axis variable.
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <x_servo+0x1>
 190:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <x_servo>
			channel = 11;      // change the channel to 11.
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		    break;
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <__vector_25+0x8e>
		
		case 11:
			y_servo =  4*value; // if channel = 11 store the received data on x-axis variable.
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1a8:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
			channel = 8;        // change the channel to 8.
 1ac:	88 e0       	ldi	r24, 0x08	; 8
 1ae:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
		    break;
			
		default:
			break;	
	}	
}
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <PWM_motors_init>:

void PWM_motors_init(void)
{
	TCCR1A|= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);    //NON Inverted PWM
 1c2:	e0 e8       	ldi	r30, 0x80	; 128
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	82 6a       	ori	r24, 0xA2	; 162
 1ca:	80 83       	st	Z, r24
	TCCR1B|= (1<<WGM13) | (1<<WGM12) | (1<<CS10);       //PRESCALER=1 MODE 14(FAST PWM)
 1cc:	e1 e8       	ldi	r30, 0x81	; 129
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	89 61       	ori	r24, 0x19	; 25
 1d4:	80 83       	st	Z, r24
	ICR1 = 3999;                                        //fPWM=4KHZ of DC motors
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 1de:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 1e2:	08 95       	ret

000001e4 <PWM_servo_init>:
}

void PWM_servo_init (void)
{
	TCCR3A|=(1<<COM3A1)|(1<<COM3B1)|(1<<WGM31);         //NON Inverted PWM
 1e4:	e0 e9       	ldi	r30, 0x90	; 144
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	82 6a       	ori	r24, 0xA2	; 162
 1ec:	80 83       	st	Z, r24
	TCCR3B|=(1<<WGM33)|(1<<WGM32)|(1<<CS31)|(1<<CS30);  //PRESCALER=64 MODE 14(FAST PWM)
 1ee:	e1 e9       	ldi	r30, 0x91	; 145
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	8b 61       	ori	r24, 0x1B	; 27
 1f6:	80 83       	st	Z, r24
	ICR3=4999;                                          //fPWM=50Hz of servo	
 1f8:	87 e8       	ldi	r24, 0x87	; 135
 1fa:	93 e1       	ldi	r25, 0x13	; 19
 1fc:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x700097>
 200:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x700096>
 204:	08 95       	ret

00000206 <USART_Init>:
}

void USART_Init (unsigned int ubrr )
{
	UBRR0H = (unsigned char)(ubrr>>8);                  // set baud rate
 206:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char)ubrr;                       // set baud rate
 20a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);                     // enable receiver and transmitter
 20e:	e1 ec       	ldi	r30, 0xC1	; 193
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);                               // set frame format: 8data, 1stop bit 
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UCSR0B |= (1<<RXCIE0);                              // interrupt enable of the USART                       
 21c:	80 81       	ld	r24, Z
 21e:	80 68       	ori	r24, 0x80	; 128
 220:	80 83       	st	Z, r24
	sei();                                              // Enable the global interrupt
 222:	78 94       	sei
 224:	08 95       	ret

00000226 <main>:
} 

int main(void)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	28 97       	sbiw	r28, 0x08	; 8
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
	 DDRB |= 0b01100000;     // PB6 and PB5 : PWM of motors OUTPUTS
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	80 66       	ori	r24, 0x60	; 96
 23e:	84 b9       	out	0x04, r24	; 4
	 DDRE |= 0b00011000;     // PE4 and PE3 : PWM of servo  OUTPUTS
 240:	8d b1       	in	r24, 0x0d	; 13
 242:	88 61       	ori	r24, 0x18	; 24
 244:	8d b9       	out	0x0d, r24	; 13
	 DDRH |= 0b00000011;     // PH1 and PH0 : IN3, IN4      OUTPUTS
 246:	e1 e0       	ldi	r30, 0x01	; 1
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	80 81       	ld	r24, Z
 24c:	83 60       	ori	r24, 0x03	; 3
 24e:	80 83       	st	Z, r24
	 DDRJ |= 0b00000011;     // PJ1 and PJ0 : IN1, IN2      OUTPUTS
 250:	e4 e0       	ldi	r30, 0x04	; 4
 252:	f1 e0       	ldi	r31, 0x01	; 1
 254:	80 81       	ld	r24, Z
 256:	83 60       	ori	r24, 0x03	; 3
 258:	80 83       	st	Z, r24
	 
	 USART_Init (MYUBRR);
 25a:	89 e1       	ldi	r24, 0x19	; 25
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	d3 df       	rcall	.-90     	; 0x206 <USART_Init>
	 PWM_motors_init();
 260:	b0 df       	rcall	.-160    	; 0x1c2 <PWM_motors_init>
	 PWM_servo_init ();
 262:	c0 df       	rcall	.-128    	; 0x1e4 <PWM_servo_init>
 264:	0f 2e       	mov	r0, r31
	 
	 
    while (1) 
    {
		OCR3A = (-(0.3851*x_servo))+534;
		OCR3B = (0.3861*y_servo)+140;
 266:	fa e9       	ldi	r31, 0x9A	; 154
 268:	8f 2e       	mov	r8, r31
 26a:	91 2c       	mov	r9, r1
 26c:	f0 2d       	mov	r31, r0
 26e:	0f 2e       	mov	r0, r31
			
		}
		
		if ((y_axis > 550) && (x_axis < 470))
		{
			M1_farward;
 270:	f5 e0       	ldi	r31, 0x05	; 5
 272:	af 2e       	mov	r10, r31
 274:	bb 24       	eor	r11, r11
 276:	b3 94       	inc	r11
 278:	f0 2d       	mov	r31, r0
 27a:	68 94       	set
			M2_farward;
 27c:	cc 24       	eor	r12, r12
 27e:	c1 f8       	bld	r12, 1
 280:	dd 24       	eor	r13, r13
 282:	d3 94       	inc	r13
 284:	0f 2e       	mov	r0, r31
			{
				OCR1B = 3999;
			}
			else
			{
				OCR1B = duty_2;
 286:	fa e8       	ldi	r31, 0x8A	; 138
 288:	2f 2e       	mov	r2, r31
 28a:	31 2c       	mov	r3, r1
 28c:	f0 2d       	mov	r31, r0
 28e:	0f 2e       	mov	r0, r31
			{
				OCR1A = 0;
			}
			else
			{
				OCR1A = duty_1;
 290:	f8 e8       	ldi	r31, 0x88	; 136
 292:	ef 2e       	mov	r14, r31
 294:	f1 2c       	mov	r15, r1
 296:	f0 2d       	mov	r31, r0
 298:	60 91 04 02 	lds	r22, 0x0204	; 0x800204 <x_servo>
    int16_t duty_2 = 0;
	 
	 
    while (1) 
    {
		OCR3A = (-(0.3851*x_servo))+534;
 29c:	70 91 05 02 	lds	r23, 0x0205	; 0x800205 <x_servo+0x1>
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	e7 d2       	rcall	.+1486   	; 0x874 <__floatunsisf>
 2a6:	24 ed       	ldi	r18, 0xD4	; 212
 2a8:	3b e2       	ldi	r19, 0x2B	; 43
 2aa:	45 ec       	ldi	r20, 0xC5	; 197
 2ac:	5e e3       	ldi	r21, 0x3E	; 62
 2ae:	70 d3       	rcall	.+1760   	; 0x990 <__mulsf3>
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e8       	ldi	r23, 0x80	; 128
 2b8:	85 e0       	ldi	r24, 0x05	; 5
 2ba:	94 e4       	ldi	r25, 0x44	; 68
 2bc:	45 d2       	rcall	.+1162   	; 0x748 <__subsf3>
 2be:	ae d2       	rcall	.+1372   	; 0x81c <__fixunssfsi>
 2c0:	e8 e9       	ldi	r30, 0x98	; 152
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	71 83       	std	Z+1, r23	; 0x01
 2c6:	60 83       	st	Z, r22
 2c8:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__data_end>
		OCR3B = (0.3861*y_servo)+140;
 2cc:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__data_end+0x1>
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	cf d2       	rcall	.+1438   	; 0x874 <__floatunsisf>
 2d6:	26 ee       	ldi	r18, 0xE6	; 230
 2d8:	3e ea       	ldi	r19, 0xAE	; 174
 2da:	45 ec       	ldi	r20, 0xC5	; 197
 2dc:	5e e3       	ldi	r21, 0x3E	; 62
 2de:	58 d3       	rcall	.+1712   	; 0x990 <__mulsf3>
 2e0:	20 e0       	ldi	r18, 0x00	; 0
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	4c e0       	ldi	r20, 0x0C	; 12
 2e6:	53 e4       	ldi	r21, 0x43	; 67
 2e8:	30 d2       	rcall	.+1120   	; 0x74a <__addsf3>
 2ea:	98 d2       	rcall	.+1328   	; 0x81c <__fixunssfsi>
 2ec:	f4 01       	movw	r30, r8
 2ee:	71 83       	std	Z+1, r23	; 0x01
 2f0:	60 83       	st	Z, r22
 2f2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
		
		if ((y_axis <= 550) && (y_axis >= 470) && (x_axis <= 550) && (x_axis >= 470))
 2f6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 2fa:	86 5d       	subi	r24, 0xD6	; 214
 2fc:	91 40       	sbci	r25, 0x01	; 1
 2fe:	81 35       	cpi	r24, 0x51	; 81
 300:	91 05       	cpc	r25, r1
 302:	08 f0       	brcs	.+2      	; 0x306 <main+0xe0>
 304:	98 c0       	rjmp	.+304    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 306:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 30a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 30e:	86 5d       	subi	r24, 0xD6	; 214
 310:	91 40       	sbci	r25, 0x01	; 1
 312:	81 35       	cpi	r24, 0x51	; 81
 314:	91 05       	cpc	r25, r1
 316:	80 f4       	brcc	.+32     	; 0x338 <main+0x112>
 318:	f7 01       	movw	r30, r14
 31a:	11 82       	std	Z+1, r1	; 0x01
		{
			OCR1A = 0;
 31c:	10 82       	st	Z, r1
 31e:	f1 01       	movw	r30, r2
 320:	11 82       	std	Z+1, r1	; 0x01
			OCR1B = 0;
 322:	10 82       	st	Z, r1
 324:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
		}
		if ((y_axis <= 550) && (y_axis >= 470) && (x_axis > 550))
 328:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 32c:	86 5d       	subi	r24, 0xD6	; 214
 32e:	91 40       	sbci	r25, 0x01	; 1
 330:	81 35       	cpi	r24, 0x51	; 81
 332:	91 05       	cpc	r25, r1
 334:	08 f0       	brcs	.+2      	; 0x338 <main+0x112>
 336:	7f c0       	rjmp	.+254    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 338:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 33c:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 340:	87 32       	cpi	r24, 0x27	; 39
 342:	92 40       	sbci	r25, 0x02	; 2
 344:	08 f4       	brcc	.+2      	; 0x348 <main+0x122>
 346:	3a c0       	rjmp	.+116    	; 0x3bc <main+0x196>
 348:	22 e0       	ldi	r18, 0x02	; 2
 34a:	f5 01       	movw	r30, r10
		{
			M1_farward;
 34c:	20 83       	st	Z, r18
 34e:	21 e0       	ldi	r18, 0x01	; 1
			M2_backward;
 350:	f6 01       	movw	r30, r12
 352:	20 83       	st	Z, r18
 354:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
			OCR1A = ((8.46*x_axis) - 4650);
 358:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	89 d2       	rcall	.+1298   	; 0x874 <__floatunsisf>
 362:	29 e2       	ldi	r18, 0x29	; 41
 364:	3c e5       	ldi	r19, 0x5C	; 92
 366:	47 e0       	ldi	r20, 0x07	; 7
 368:	51 e4       	ldi	r21, 0x41	; 65
 36a:	12 d3       	rcall	.+1572   	; 0x990 <__mulsf3>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e5       	ldi	r19, 0x50	; 80
 370:	41 e9       	ldi	r20, 0x91	; 145
 372:	55 e4       	ldi	r21, 0x45	; 69
 374:	e9 d1       	rcall	.+978    	; 0x748 <__subsf3>
 376:	52 d2       	rcall	.+1188   	; 0x81c <__fixunssfsi>
 378:	f7 01       	movw	r30, r14
 37a:	71 83       	std	Z+1, r23	; 0x01
 37c:	60 83       	st	Z, r22
 37e:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
			OCR1B = ((8.46*x_axis) - 4650);
 382:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	74 d2       	rcall	.+1256   	; 0x874 <__floatunsisf>
 38c:	29 e2       	ldi	r18, 0x29	; 41
 38e:	3c e5       	ldi	r19, 0x5C	; 92
 390:	47 e0       	ldi	r20, 0x07	; 7
 392:	51 e4       	ldi	r21, 0x41	; 65
 394:	fd d2       	rcall	.+1530   	; 0x990 <__mulsf3>
 396:	20 e0       	ldi	r18, 0x00	; 0
 398:	30 e5       	ldi	r19, 0x50	; 80
 39a:	41 e9       	ldi	r20, 0x91	; 145
 39c:	55 e4       	ldi	r21, 0x45	; 69
 39e:	d4 d1       	rcall	.+936    	; 0x748 <__subsf3>
 3a0:	3d d2       	rcall	.+1146   	; 0x81c <__fixunssfsi>
 3a2:	f1 01       	movw	r30, r2
 3a4:	71 83       	std	Z+1, r23	; 0x01
 3a6:	60 83       	st	Z, r22
 3a8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
 3ac:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
		}
		
		if ((y_axis <= 550) && (y_axis >= 470) && (x_axis < 470))
 3b0:	86 5d       	subi	r24, 0xD6	; 214
 3b2:	91 40       	sbci	r25, 0x01	; 1
 3b4:	81 35       	cpi	r24, 0x51	; 81
 3b6:	91 05       	cpc	r25, r1
 3b8:	08 f0       	brcs	.+2      	; 0x3bc <main+0x196>
 3ba:	3d c0       	rjmp	.+122    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3bc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 3c0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 3c4:	86 3d       	cpi	r24, 0xD6	; 214
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	9f 07       	cpc	r25, r31
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <main+0x1a8>
 3cc:	97 c1       	rjmp	.+814    	; 0x6fc <__LOCK_REGION_LENGTH__+0x2fc>
 3ce:	21 e0       	ldi	r18, 0x01	; 1
		{
			M1_backward;
 3d0:	f5 01       	movw	r30, r10
 3d2:	20 83       	st	Z, r18
 3d4:	22 e0       	ldi	r18, 0x02	; 2
			M2_farward;
 3d6:	f6 01       	movw	r30, r12
 3d8:	20 83       	st	Z, r18
			OCR1A = (3999-(8.5086*x_axis));
 3da:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
 3de:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	46 d2       	rcall	.+1164   	; 0x874 <__floatunsisf>
 3e8:	2a e3       	ldi	r18, 0x3A	; 58
 3ea:	33 e2       	ldi	r19, 0x23	; 35
 3ec:	48 e0       	ldi	r20, 0x08	; 8
 3ee:	51 e4       	ldi	r21, 0x41	; 65
 3f0:	cf d2       	rcall	.+1438   	; 0x990 <__mulsf3>
 3f2:	9b 01       	movw	r18, r22
 3f4:	ac 01       	movw	r20, r24
 3f6:	60 e0       	ldi	r22, 0x00	; 0
 3f8:	70 ef       	ldi	r23, 0xF0	; 240
 3fa:	89 e7       	ldi	r24, 0x79	; 121
 3fc:	95 e4       	ldi	r25, 0x45	; 69
 3fe:	a4 d1       	rcall	.+840    	; 0x748 <__subsf3>
 400:	0d d2       	rcall	.+1050   	; 0x81c <__fixunssfsi>
 402:	f7 01       	movw	r30, r14
 404:	71 83       	std	Z+1, r23	; 0x01
 406:	60 83       	st	Z, r22
			OCR1B = (3999-(8.5086*x_axis));
 408:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
 40c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	2f d2       	rcall	.+1118   	; 0x874 <__floatunsisf>
 416:	2a e3       	ldi	r18, 0x3A	; 58
 418:	33 e2       	ldi	r19, 0x23	; 35
 41a:	48 e0       	ldi	r20, 0x08	; 8
 41c:	51 e4       	ldi	r21, 0x41	; 65
 41e:	b8 d2       	rcall	.+1392   	; 0x990 <__mulsf3>
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 ef       	ldi	r23, 0xF0	; 240
 428:	89 e7       	ldi	r24, 0x79	; 121
 42a:	95 e4       	ldi	r25, 0x45	; 69
 42c:	8d d1       	rcall	.+794    	; 0x748 <__subsf3>
 42e:	f6 d1       	rcall	.+1004   	; 0x81c <__fixunssfsi>
 430:	f1 01       	movw	r30, r2
 432:	71 83       	std	Z+1, r23	; 0x01
 434:	60 83       	st	Z, r22
 436:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
 43a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
			
		}
		
		if ((y_axis > 550) && (x_axis >= 470) && (x_axis <= 550))
 43e:	87 32       	cpi	r24, 0x27	; 39
 440:	92 40       	sbci	r25, 0x02	; 2
 442:	08 f4       	brcc	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 444:	69 c1       	rjmp	.+722    	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
 446:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 44a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 44e:	86 3d       	cpi	r24, 0xD6	; 214
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	92 07       	cpc	r25, r18
 454:	08 f4       	brcc	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	83 c0       	rjmp	.+262    	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 458:	87 32       	cpi	r24, 0x27	; 39
 45a:	92 40       	sbci	r25, 0x02	; 2
 45c:	78 f5       	brcc	.+94     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 45e:	22 e0       	ldi	r18, 0x02	; 2
		{
			M1_farward;
 460:	f5 01       	movw	r30, r10
 462:	20 83       	st	Z, r18
 464:	f6 01       	movw	r30, r12
			M2_farward;
 466:	20 83       	st	Z, r18
 468:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
			OCR1A = ((8.46*y_axis) - 4650) ;
 46c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	ff d1       	rcall	.+1022   	; 0x874 <__floatunsisf>
 476:	29 e2       	ldi	r18, 0x29	; 41
 478:	3c e5       	ldi	r19, 0x5C	; 92
 47a:	47 e0       	ldi	r20, 0x07	; 7
 47c:	51 e4       	ldi	r21, 0x41	; 65
 47e:	88 d2       	rcall	.+1296   	; 0x990 <__mulsf3>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e5       	ldi	r19, 0x50	; 80
 484:	41 e9       	ldi	r20, 0x91	; 145
 486:	55 e4       	ldi	r21, 0x45	; 69
 488:	5f d1       	rcall	.+702    	; 0x748 <__subsf3>
 48a:	c8 d1       	rcall	.+912    	; 0x81c <__fixunssfsi>
 48c:	f7 01       	movw	r30, r14
 48e:	71 83       	std	Z+1, r23	; 0x01
 490:	60 83       	st	Z, r22
 492:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
			OCR1B = ((8.46*y_axis) - 4650) ;
 496:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	ea d1       	rcall	.+980    	; 0x874 <__floatunsisf>
 4a0:	29 e2       	ldi	r18, 0x29	; 41
 4a2:	3c e5       	ldi	r19, 0x5C	; 92
 4a4:	47 e0       	ldi	r20, 0x07	; 7
 4a6:	51 e4       	ldi	r21, 0x41	; 65
 4a8:	73 d2       	rcall	.+1254   	; 0x990 <__mulsf3>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e5       	ldi	r19, 0x50	; 80
 4ae:	41 e9       	ldi	r20, 0x91	; 145
 4b0:	55 e4       	ldi	r21, 0x45	; 69
 4b2:	4a d1       	rcall	.+660    	; 0x748 <__subsf3>
 4b4:	b3 d1       	rcall	.+870    	; 0x81c <__fixunssfsi>
 4b6:	f1 01       	movw	r30, r2
 4b8:	71 83       	std	Z+1, r23	; 0x01
 4ba:	60 83       	st	Z, r22
 4bc:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
 4c0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
			
		}
		
		if ((y_axis < 470) && (x_axis >= 470) && (x_axis <= 550))
 4c4:	86 3d       	cpi	r24, 0xD6	; 214
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	9f 07       	cpc	r25, r31
 4ca:	08 f0       	brcs	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	40 c0       	rjmp	.+128    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4ce:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <x_axis>
 4d2:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <x_axis+0x1>
 4d6:	26 3d       	cpi	r18, 0xD6	; 214
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	34 07       	cpc	r19, r20
 4dc:	08 f4       	brcc	.+2      	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 4de:	37 c0       	rjmp	.+110    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 4e0:	27 32       	cpi	r18, 0x27	; 39
 4e2:	32 40       	sbci	r19, 0x02	; 2
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4e6:	13 c1       	rjmp	.+550    	; 0x70e <__LOCK_REGION_LENGTH__+0x30e>
		{
			M1_backward;
 4e8:	21 e0       	ldi	r18, 0x01	; 1
 4ea:	f5 01       	movw	r30, r10
 4ec:	20 83       	st	Z, r18
			M2_backward;
 4ee:	f6 01       	movw	r30, r12
			OCR1A = (3999 - (8.5086* y_axis));
 4f0:	20 83       	st	Z, r18
 4f2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
 4f6:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	ba d1       	rcall	.+884    	; 0x874 <__floatunsisf>
 500:	2a e3       	ldi	r18, 0x3A	; 58
 502:	33 e2       	ldi	r19, 0x23	; 35
 504:	48 e0       	ldi	r20, 0x08	; 8
 506:	51 e4       	ldi	r21, 0x41	; 65
 508:	43 d2       	rcall	.+1158   	; 0x990 <__mulsf3>
 50a:	9b 01       	movw	r18, r22
 50c:	ac 01       	movw	r20, r24
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	70 ef       	ldi	r23, 0xF0	; 240
 512:	89 e7       	ldi	r24, 0x79	; 121
 514:	95 e4       	ldi	r25, 0x45	; 69
 516:	18 d1       	rcall	.+560    	; 0x748 <__subsf3>
 518:	81 d1       	rcall	.+770    	; 0x81c <__fixunssfsi>
 51a:	f7 01       	movw	r30, r14
 51c:	71 83       	std	Z+1, r23	; 0x01
 51e:	60 83       	st	Z, r22
 520:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
			OCR1B = (3999 - (8.5086* y_axis));
 524:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	a3 d1       	rcall	.+838    	; 0x874 <__floatunsisf>
 52e:	2a e3       	ldi	r18, 0x3A	; 58
 530:	33 e2       	ldi	r19, 0x23	; 35
 532:	48 e0       	ldi	r20, 0x08	; 8
 534:	51 e4       	ldi	r21, 0x41	; 65
 536:	2c d2       	rcall	.+1112   	; 0x990 <__mulsf3>
 538:	9b 01       	movw	r18, r22
 53a:	ac 01       	movw	r20, r24
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	70 ef       	ldi	r23, 0xF0	; 240
 540:	89 e7       	ldi	r24, 0x79	; 121
 542:	95 e4       	ldi	r25, 0x45	; 69
 544:	01 d1       	rcall	.+514    	; 0x748 <__subsf3>
 546:	6a d1       	rcall	.+724    	; 0x81c <__fixunssfsi>
 548:	f1 01       	movw	r30, r2
 54a:	71 83       	std	Z+1, r23	; 0x01
 54c:	60 83       	st	Z, r22
 54e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
			
		}
		
		if ((y_axis > 550) && (x_axis > 550))
 552:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 556:	87 32       	cpi	r24, 0x27	; 39
 558:	92 40       	sbci	r25, 0x02	; 2
 55a:	08 f4       	brcc	.+2      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 55c:	9d ce       	rjmp	.-710    	; 0x298 <main+0x72>
 55e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 562:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 566:	87 32       	cpi	r24, 0x27	; 39
 568:	92 40       	sbci	r25, 0x02	; 2
 56a:	08 f4       	brcc	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 56c:	63 c0       	rjmp	.+198    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
		{
			M1_farward;
 56e:	22 e0       	ldi	r18, 0x02	; 2
 570:	f5 01       	movw	r30, r10
 572:	20 83       	st	Z, r18
			M2_farward;
 574:	f6 01       	movw	r30, r12
 576:	20 83       	st	Z, r18
			
			duty_1 = ((8.46*y_axis) - 4650) + ((8.46*x_axis)-4650);
 578:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
 57c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	77 d1       	rcall	.+750    	; 0x874 <__floatunsisf>
 586:	29 e2       	ldi	r18, 0x29	; 41
 588:	3c e5       	ldi	r19, 0x5C	; 92
 58a:	47 e0       	ldi	r20, 0x07	; 7
 58c:	51 e4       	ldi	r21, 0x41	; 65
 58e:	00 d2       	rcall	.+1024   	; 0x990 <__mulsf3>
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	30 e5       	ldi	r19, 0x50	; 80
 594:	41 e9       	ldi	r20, 0x91	; 145
 596:	55 e4       	ldi	r21, 0x45	; 69
 598:	d7 d0       	rcall	.+430    	; 0x748 <__subsf3>
 59a:	69 83       	std	Y+1, r22	; 0x01
 59c:	7a 83       	std	Y+2, r23	; 0x02
 59e:	8b 83       	std	Y+3, r24	; 0x03
 5a0:	9c 83       	std	Y+4, r25	; 0x04
 5a2:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
 5a6:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	62 d1       	rcall	.+708    	; 0x874 <__floatunsisf>
 5b0:	29 e2       	ldi	r18, 0x29	; 41
 5b2:	3c e5       	ldi	r19, 0x5C	; 92
 5b4:	47 e0       	ldi	r20, 0x07	; 7
 5b6:	51 e4       	ldi	r21, 0x41	; 65
 5b8:	eb d1       	rcall	.+982    	; 0x990 <__mulsf3>
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e5       	ldi	r19, 0x50	; 80
 5be:	41 e9       	ldi	r20, 0x91	; 145
 5c0:	55 e4       	ldi	r21, 0x45	; 69
 5c2:	c2 d0       	rcall	.+388    	; 0x748 <__subsf3>
 5c4:	6d 83       	std	Y+5, r22	; 0x05
 5c6:	7e 83       	std	Y+6, r23	; 0x06
 5c8:	8f 83       	std	Y+7, r24	; 0x07
 5ca:	98 87       	std	Y+8, r25	; 0x08
 5cc:	9b 01       	movw	r18, r22
 5ce:	ac 01       	movw	r20, r24
 5d0:	69 81       	ldd	r22, Y+1	; 0x01
 5d2:	7a 81       	ldd	r23, Y+2	; 0x02
 5d4:	8b 81       	ldd	r24, Y+3	; 0x03
 5d6:	9c 81       	ldd	r25, Y+4	; 0x04
 5d8:	b8 d0       	rcall	.+368    	; 0x74a <__addsf3>
 5da:	1b d1       	rcall	.+566    	; 0x812 <__fixsfsi>
 5dc:	2b 01       	movw	r4, r22
 5de:	3c 01       	movw	r6, r24
 5e0:	2d 81       	ldd	r18, Y+5	; 0x05
 5e2:	3e 81       	ldd	r19, Y+6	; 0x06
 5e4:	4f 81       	ldd	r20, Y+7	; 0x07
 5e6:	58 85       	ldd	r21, Y+8	; 0x08
			duty_2 = ((8.46*y_axis) - 4650) - ((8.46*x_axis)-4650);
 5e8:	69 81       	ldd	r22, Y+1	; 0x01
 5ea:	7a 81       	ldd	r23, Y+2	; 0x02
 5ec:	8b 81       	ldd	r24, Y+3	; 0x03
 5ee:	9c 81       	ldd	r25, Y+4	; 0x04
 5f0:	ab d0       	rcall	.+342    	; 0x748 <__subsf3>
 5f2:	0f d1       	rcall	.+542    	; 0x812 <__fixsfsi>
 5f4:	9b 01       	movw	r18, r22
 5f6:	f0 ea       	ldi	r31, 0xA0	; 160
 5f8:	4f 16       	cp	r4, r31
 5fa:	ff e0       	ldi	r31, 0x0F	; 15
 5fc:	5f 06       	cpc	r5, r31
 5fe:	34 f0       	brlt	.+12     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
			
			if (duty_1 > 3999)
 600:	4f e9       	ldi	r20, 0x9F	; 159
 602:	5f e0       	ldi	r21, 0x0F	; 15
 604:	f7 01       	movw	r30, r14
 606:	51 83       	std	Z+1, r21	; 0x01
			{
				OCR1A = 3999;
 608:	40 83       	st	Z, r20
 60a:	03 c0       	rjmp	.+6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 60c:	f7 01       	movw	r30, r14
 60e:	51 82       	std	Z+1, r5	; 0x01
 610:	40 82       	st	Z, r4
			}
			else
			{
				OCR1A = duty_1;
 612:	33 23       	and	r19, r19
 614:	24 f4       	brge	.+8      	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
 616:	f1 01       	movw	r30, r2
			}
			if (duty_2 < 0)
 618:	11 82       	std	Z+1, r1	; 0x01
 61a:	10 82       	st	Z, r1
			{
				OCR1B = 0;
 61c:	03 c0       	rjmp	.+6      	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
 61e:	f1 01       	movw	r30, r2
 620:	71 83       	std	Z+1, r23	; 0x01
			}
			else
			{
				OCR1B = duty_2;
 622:	60 83       	st	Z, r22
 624:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
			}
			
		}
		
		if ((y_axis > 550) && (x_axis < 470))
 628:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 62c:	87 32       	cpi	r24, 0x27	; 39
 62e:	92 40       	sbci	r25, 0x02	; 2
 630:	08 f4       	brcc	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
 632:	32 ce       	rjmp	.-924    	; 0x298 <main+0x72>
 634:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <x_axis>
 638:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <x_axis+0x1>
 63c:	86 3d       	cpi	r24, 0xD6	; 214
 63e:	91 40       	sbci	r25, 0x01	; 1
 640:	08 f0       	brcs	.+2      	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
 642:	2a ce       	rjmp	.-940    	; 0x298 <main+0x72>
 644:	22 e0       	ldi	r18, 0x02	; 2
		{
			M1_farward;
 646:	f5 01       	movw	r30, r10
 648:	20 83       	st	Z, r18
			M2_farward;
 64a:	f6 01       	movw	r30, r12
			
			duty_1 = ((8.46*y_axis) - 4650) - (3999-(8.5086*x_axis));
 64c:	20 83       	st	Z, r18
 64e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <y_axis>
 652:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <y_axis+0x1>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0c d1       	rcall	.+536    	; 0x874 <__floatunsisf>
 65c:	29 e2       	ldi	r18, 0x29	; 41
 65e:	3c e5       	ldi	r19, 0x5C	; 92
 660:	47 e0       	ldi	r20, 0x07	; 7
 662:	51 e4       	ldi	r21, 0x41	; 65
 664:	95 d1       	rcall	.+810    	; 0x990 <__mulsf3>
 666:	20 e0       	ldi	r18, 0x00	; 0
 668:	30 e5       	ldi	r19, 0x50	; 80
 66a:	41 e9       	ldi	r20, 0x91	; 145
 66c:	55 e4       	ldi	r21, 0x45	; 69
 66e:	6c d0       	rcall	.+216    	; 0x748 <__subsf3>
 670:	69 83       	std	Y+1, r22	; 0x01
 672:	7a 83       	std	Y+2, r23	; 0x02
 674:	8b 83       	std	Y+3, r24	; 0x03
 676:	9c 83       	std	Y+4, r25	; 0x04
 678:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <x_axis>
 67c:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <x_axis+0x1>
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	f7 d0       	rcall	.+494    	; 0x874 <__floatunsisf>
 686:	2a e3       	ldi	r18, 0x3A	; 58
 688:	33 e2       	ldi	r19, 0x23	; 35
 68a:	48 e0       	ldi	r20, 0x08	; 8
 68c:	51 e4       	ldi	r21, 0x41	; 65
 68e:	80 d1       	rcall	.+768    	; 0x990 <__mulsf3>
 690:	9b 01       	movw	r18, r22
 692:	ac 01       	movw	r20, r24
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	70 ef       	ldi	r23, 0xF0	; 240
 698:	89 e7       	ldi	r24, 0x79	; 121
 69a:	95 e4       	ldi	r25, 0x45	; 69
 69c:	55 d0       	rcall	.+170    	; 0x748 <__subsf3>
 69e:	6d 83       	std	Y+5, r22	; 0x05
 6a0:	7e 83       	std	Y+6, r23	; 0x06
 6a2:	8f 83       	std	Y+7, r24	; 0x07
 6a4:	98 87       	std	Y+8, r25	; 0x08
 6a6:	9b 01       	movw	r18, r22
 6a8:	ac 01       	movw	r20, r24
 6aa:	69 81       	ldd	r22, Y+1	; 0x01
 6ac:	7a 81       	ldd	r23, Y+2	; 0x02
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	9c 81       	ldd	r25, Y+4	; 0x04
 6b2:	4a d0       	rcall	.+148    	; 0x748 <__subsf3>
 6b4:	ae d0       	rcall	.+348    	; 0x812 <__fixsfsi>
 6b6:	2b 01       	movw	r4, r22
 6b8:	3c 01       	movw	r6, r24
 6ba:	2d 81       	ldd	r18, Y+5	; 0x05
 6bc:	3e 81       	ldd	r19, Y+6	; 0x06
 6be:	4f 81       	ldd	r20, Y+7	; 0x07
 6c0:	58 85       	ldd	r21, Y+8	; 0x08
 6c2:	69 81       	ldd	r22, Y+1	; 0x01
			duty_2 = ((8.46*y_axis) - 4650) + (3999-(8.5086*x_axis));
 6c4:	7a 81       	ldd	r23, Y+2	; 0x02
 6c6:	8b 81       	ldd	r24, Y+3	; 0x03
 6c8:	9c 81       	ldd	r25, Y+4	; 0x04
 6ca:	3f d0       	rcall	.+126    	; 0x74a <__addsf3>
 6cc:	a2 d0       	rcall	.+324    	; 0x812 <__fixsfsi>
 6ce:	9b 01       	movw	r18, r22
 6d0:	55 20       	and	r5, r5
 6d2:	24 f4       	brge	.+8      	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6d4:	f7 01       	movw	r30, r14
 6d6:	11 82       	std	Z+1, r1	; 0x01
 6d8:	10 82       	st	Z, r1
 6da:	03 c0       	rjmp	.+6      	; 0x6e2 <__LOCK_REGION_LENGTH__+0x2e2>
 6dc:	f7 01       	movw	r30, r14
			
			if ( duty_1 < 0)
 6de:	51 82       	std	Z+1, r5	; 0x01
 6e0:	40 82       	st	Z, r4
			{
				OCR1A = 0;
 6e2:	20 3a       	cpi	r18, 0xA0	; 160
 6e4:	3f 40       	sbci	r19, 0x0F	; 15
 6e6:	34 f0       	brlt	.+12     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6e8:	4f e9       	ldi	r20, 0x9F	; 159
			}
			else
			{
				OCR1A = duty_1;
 6ea:	5f e0       	ldi	r21, 0x0F	; 15
 6ec:	f1 01       	movw	r30, r2
 6ee:	51 83       	std	Z+1, r21	; 0x01
			}
			if ( duty_2 > 3999)
 6f0:	40 83       	st	Z, r20
 6f2:	d2 cd       	rjmp	.-1116   	; 0x298 <main+0x72>
 6f4:	f1 01       	movw	r30, r2
			{
				OCR1B = 3999;
 6f6:	71 83       	std	Z+1, r23	; 0x01
 6f8:	60 83       	st	Z, r22
 6fa:	ce cd       	rjmp	.-1124   	; 0x298 <main+0x72>
 6fc:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <y_axis>
 700:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <y_axis+0x1>
			}
			else
			{
				OCR1B = duty_2;
 704:	27 32       	cpi	r18, 0x27	; 39
 706:	32 40       	sbci	r19, 0x02	; 2
 708:	08 f0       	brcs	.+2      	; 0x70c <__LOCK_REGION_LENGTH__+0x30c>
			OCR1A = (3999-(8.5086*x_axis));
			OCR1B = (3999-(8.5086*x_axis));
			
		}
		
		if ((y_axis > 550) && (x_axis >= 470) && (x_axis <= 550))
 70a:	a6 ce       	rjmp	.-692    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 70c:	14 c0       	rjmp	.+40     	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
 70e:	87 32       	cpi	r24, 0x27	; 39
 710:	92 40       	sbci	r25, 0x02	; 2
 712:	08 f0       	brcs	.+2      	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
 714:	2c cf       	rjmp	.-424    	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 716:	c0 cd       	rjmp	.-1152   	; 0x298 <main+0x72>
 718:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
			OCR1A = (3999 - (8.5086* y_axis));
			OCR1B = (3999 - (8.5086* y_axis));
			
		}
		
		if ((y_axis > 550) && (x_axis > 550))
 71c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 720:	86 3d       	cpi	r24, 0xD6	; 214
 722:	41 e0       	ldi	r20, 0x01	; 1
 724:	94 07       	cpc	r25, r20
			OCR1A = ((8.46*y_axis) - 4650) ;
			OCR1B = ((8.46*y_axis) - 4650) ;
			
		}
		
		if ((y_axis < 470) && (x_axis >= 470) && (x_axis <= 550))
 726:	08 f4       	brcc	.+2      	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 728:	d2 ce       	rjmp	.-604    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 72a:	b6 cd       	rjmp	.-1172   	; 0x298 <main+0x72>
 72c:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <x_axis>
 730:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <x_axis+0x1>
 734:	d5 ce       	rjmp	.-598    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 736:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <y_axis>
 73a:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <y_axis+0x1>
 73e:	86 3d       	cpi	r24, 0xD6	; 214
 740:	51 e0       	ldi	r21, 0x01	; 1
 742:	95 07       	cpc	r25, r21
 744:	98 f3       	brcs	.-26     	; 0x72c <__LOCK_REGION_LENGTH__+0x32c>
 746:	03 cf       	rjmp	.-506    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>

00000748 <__subsf3>:
 748:	50 58       	subi	r21, 0x80	; 128

0000074a <__addsf3>:
 74a:	bb 27       	eor	r27, r27
 74c:	aa 27       	eor	r26, r26
 74e:	0e d0       	rcall	.+28     	; 0x76c <__addsf3x>
 750:	e5 c0       	rjmp	.+458    	; 0x91c <__fp_round>
 752:	d6 d0       	rcall	.+428    	; 0x900 <__fp_pscA>
 754:	30 f0       	brcs	.+12     	; 0x762 <__addsf3+0x18>
 756:	db d0       	rcall	.+438    	; 0x90e <__fp_pscB>
 758:	20 f0       	brcs	.+8      	; 0x762 <__addsf3+0x18>
 75a:	31 f4       	brne	.+12     	; 0x768 <__addsf3+0x1e>
 75c:	9f 3f       	cpi	r25, 0xFF	; 255
 75e:	11 f4       	brne	.+4      	; 0x764 <__addsf3+0x1a>
 760:	1e f4       	brtc	.+6      	; 0x768 <__addsf3+0x1e>
 762:	cb c0       	rjmp	.+406    	; 0x8fa <__fp_nan>
 764:	0e f4       	brtc	.+2      	; 0x768 <__addsf3+0x1e>
 766:	e0 95       	com	r30
 768:	e7 fb       	bst	r30, 7
 76a:	c1 c0       	rjmp	.+386    	; 0x8ee <__fp_inf>

0000076c <__addsf3x>:
 76c:	e9 2f       	mov	r30, r25
 76e:	e7 d0       	rcall	.+462    	; 0x93e <__fp_split3>
 770:	80 f3       	brcs	.-32     	; 0x752 <__addsf3+0x8>
 772:	ba 17       	cp	r27, r26
 774:	62 07       	cpc	r22, r18
 776:	73 07       	cpc	r23, r19
 778:	84 07       	cpc	r24, r20
 77a:	95 07       	cpc	r25, r21
 77c:	18 f0       	brcs	.+6      	; 0x784 <__addsf3x+0x18>
 77e:	71 f4       	brne	.+28     	; 0x79c <__addsf3x+0x30>
 780:	9e f5       	brtc	.+102    	; 0x7e8 <__addsf3x+0x7c>
 782:	ff c0       	rjmp	.+510    	; 0x982 <__fp_zero>
 784:	0e f4       	brtc	.+2      	; 0x788 <__addsf3x+0x1c>
 786:	e0 95       	com	r30
 788:	0b 2e       	mov	r0, r27
 78a:	ba 2f       	mov	r27, r26
 78c:	a0 2d       	mov	r26, r0
 78e:	0b 01       	movw	r0, r22
 790:	b9 01       	movw	r22, r18
 792:	90 01       	movw	r18, r0
 794:	0c 01       	movw	r0, r24
 796:	ca 01       	movw	r24, r20
 798:	a0 01       	movw	r20, r0
 79a:	11 24       	eor	r1, r1
 79c:	ff 27       	eor	r31, r31
 79e:	59 1b       	sub	r21, r25
 7a0:	99 f0       	breq	.+38     	; 0x7c8 <__addsf3x+0x5c>
 7a2:	59 3f       	cpi	r21, 0xF9	; 249
 7a4:	50 f4       	brcc	.+20     	; 0x7ba <__addsf3x+0x4e>
 7a6:	50 3e       	cpi	r21, 0xE0	; 224
 7a8:	68 f1       	brcs	.+90     	; 0x804 <__addsf3x+0x98>
 7aa:	1a 16       	cp	r1, r26
 7ac:	f0 40       	sbci	r31, 0x00	; 0
 7ae:	a2 2f       	mov	r26, r18
 7b0:	23 2f       	mov	r18, r19
 7b2:	34 2f       	mov	r19, r20
 7b4:	44 27       	eor	r20, r20
 7b6:	58 5f       	subi	r21, 0xF8	; 248
 7b8:	f3 cf       	rjmp	.-26     	; 0x7a0 <__addsf3x+0x34>
 7ba:	46 95       	lsr	r20
 7bc:	37 95       	ror	r19
 7be:	27 95       	ror	r18
 7c0:	a7 95       	ror	r26
 7c2:	f0 40       	sbci	r31, 0x00	; 0
 7c4:	53 95       	inc	r21
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__addsf3x+0x4e>
 7c8:	7e f4       	brtc	.+30     	; 0x7e8 <__addsf3x+0x7c>
 7ca:	1f 16       	cp	r1, r31
 7cc:	ba 0b       	sbc	r27, r26
 7ce:	62 0b       	sbc	r22, r18
 7d0:	73 0b       	sbc	r23, r19
 7d2:	84 0b       	sbc	r24, r20
 7d4:	ba f0       	brmi	.+46     	; 0x804 <__addsf3x+0x98>
 7d6:	91 50       	subi	r25, 0x01	; 1
 7d8:	a1 f0       	breq	.+40     	; 0x802 <__addsf3x+0x96>
 7da:	ff 0f       	add	r31, r31
 7dc:	bb 1f       	adc	r27, r27
 7de:	66 1f       	adc	r22, r22
 7e0:	77 1f       	adc	r23, r23
 7e2:	88 1f       	adc	r24, r24
 7e4:	c2 f7       	brpl	.-16     	; 0x7d6 <__addsf3x+0x6a>
 7e6:	0e c0       	rjmp	.+28     	; 0x804 <__addsf3x+0x98>
 7e8:	ba 0f       	add	r27, r26
 7ea:	62 1f       	adc	r22, r18
 7ec:	73 1f       	adc	r23, r19
 7ee:	84 1f       	adc	r24, r20
 7f0:	48 f4       	brcc	.+18     	; 0x804 <__addsf3x+0x98>
 7f2:	87 95       	ror	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f7 95       	ror	r31
 7fc:	9e 3f       	cpi	r25, 0xFE	; 254
 7fe:	08 f0       	brcs	.+2      	; 0x802 <__addsf3x+0x96>
 800:	b3 cf       	rjmp	.-154    	; 0x768 <__addsf3+0x1e>
 802:	93 95       	inc	r25
 804:	88 0f       	add	r24, r24
 806:	08 f0       	brcs	.+2      	; 0x80a <__addsf3x+0x9e>
 808:	99 27       	eor	r25, r25
 80a:	ee 0f       	add	r30, r30
 80c:	97 95       	ror	r25
 80e:	87 95       	ror	r24
 810:	08 95       	ret

00000812 <__fixsfsi>:
 812:	04 d0       	rcall	.+8      	; 0x81c <__fixunssfsi>
 814:	68 94       	set
 816:	b1 11       	cpse	r27, r1
 818:	b5 c0       	rjmp	.+362    	; 0x984 <__fp_szero>
 81a:	08 95       	ret

0000081c <__fixunssfsi>:
 81c:	98 d0       	rcall	.+304    	; 0x94e <__fp_splitA>
 81e:	88 f0       	brcs	.+34     	; 0x842 <__fixunssfsi+0x26>
 820:	9f 57       	subi	r25, 0x7F	; 127
 822:	90 f0       	brcs	.+36     	; 0x848 <__fixunssfsi+0x2c>
 824:	b9 2f       	mov	r27, r25
 826:	99 27       	eor	r25, r25
 828:	b7 51       	subi	r27, 0x17	; 23
 82a:	a0 f0       	brcs	.+40     	; 0x854 <__fixunssfsi+0x38>
 82c:	d1 f0       	breq	.+52     	; 0x862 <__fixunssfsi+0x46>
 82e:	66 0f       	add	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	1a f0       	brmi	.+6      	; 0x83e <__fixunssfsi+0x22>
 838:	ba 95       	dec	r27
 83a:	c9 f7       	brne	.-14     	; 0x82e <__fixunssfsi+0x12>
 83c:	12 c0       	rjmp	.+36     	; 0x862 <__fixunssfsi+0x46>
 83e:	b1 30       	cpi	r27, 0x01	; 1
 840:	81 f0       	breq	.+32     	; 0x862 <__fixunssfsi+0x46>
 842:	9f d0       	rcall	.+318    	; 0x982 <__fp_zero>
 844:	b1 e0       	ldi	r27, 0x01	; 1
 846:	08 95       	ret
 848:	9c c0       	rjmp	.+312    	; 0x982 <__fp_zero>
 84a:	67 2f       	mov	r22, r23
 84c:	78 2f       	mov	r23, r24
 84e:	88 27       	eor	r24, r24
 850:	b8 5f       	subi	r27, 0xF8	; 248
 852:	39 f0       	breq	.+14     	; 0x862 <__fixunssfsi+0x46>
 854:	b9 3f       	cpi	r27, 0xF9	; 249
 856:	cc f3       	brlt	.-14     	; 0x84a <__fixunssfsi+0x2e>
 858:	86 95       	lsr	r24
 85a:	77 95       	ror	r23
 85c:	67 95       	ror	r22
 85e:	b3 95       	inc	r27
 860:	d9 f7       	brne	.-10     	; 0x858 <__fixunssfsi+0x3c>
 862:	3e f4       	brtc	.+14     	; 0x872 <__fixunssfsi+0x56>
 864:	90 95       	com	r25
 866:	80 95       	com	r24
 868:	70 95       	com	r23
 86a:	61 95       	neg	r22
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	8f 4f       	sbci	r24, 0xFF	; 255
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	08 95       	ret

00000874 <__floatunsisf>:
 874:	e8 94       	clt
 876:	09 c0       	rjmp	.+18     	; 0x88a <__floatsisf+0x12>

00000878 <__floatsisf>:
 878:	97 fb       	bst	r25, 7
 87a:	3e f4       	brtc	.+14     	; 0x88a <__floatsisf+0x12>
 87c:	90 95       	com	r25
 87e:	80 95       	com	r24
 880:	70 95       	com	r23
 882:	61 95       	neg	r22
 884:	7f 4f       	sbci	r23, 0xFF	; 255
 886:	8f 4f       	sbci	r24, 0xFF	; 255
 888:	9f 4f       	sbci	r25, 0xFF	; 255
 88a:	99 23       	and	r25, r25
 88c:	a9 f0       	breq	.+42     	; 0x8b8 <__floatsisf+0x40>
 88e:	f9 2f       	mov	r31, r25
 890:	96 e9       	ldi	r25, 0x96	; 150
 892:	bb 27       	eor	r27, r27
 894:	93 95       	inc	r25
 896:	f6 95       	lsr	r31
 898:	87 95       	ror	r24
 89a:	77 95       	ror	r23
 89c:	67 95       	ror	r22
 89e:	b7 95       	ror	r27
 8a0:	f1 11       	cpse	r31, r1
 8a2:	f8 cf       	rjmp	.-16     	; 0x894 <__floatsisf+0x1c>
 8a4:	fa f4       	brpl	.+62     	; 0x8e4 <__floatsisf+0x6c>
 8a6:	bb 0f       	add	r27, r27
 8a8:	11 f4       	brne	.+4      	; 0x8ae <__floatsisf+0x36>
 8aa:	60 ff       	sbrs	r22, 0
 8ac:	1b c0       	rjmp	.+54     	; 0x8e4 <__floatsisf+0x6c>
 8ae:	6f 5f       	subi	r22, 0xFF	; 255
 8b0:	7f 4f       	sbci	r23, 0xFF	; 255
 8b2:	8f 4f       	sbci	r24, 0xFF	; 255
 8b4:	9f 4f       	sbci	r25, 0xFF	; 255
 8b6:	16 c0       	rjmp	.+44     	; 0x8e4 <__floatsisf+0x6c>
 8b8:	88 23       	and	r24, r24
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <__floatsisf+0x48>
 8bc:	96 e9       	ldi	r25, 0x96	; 150
 8be:	11 c0       	rjmp	.+34     	; 0x8e2 <__floatsisf+0x6a>
 8c0:	77 23       	and	r23, r23
 8c2:	21 f0       	breq	.+8      	; 0x8cc <__floatsisf+0x54>
 8c4:	9e e8       	ldi	r25, 0x8E	; 142
 8c6:	87 2f       	mov	r24, r23
 8c8:	76 2f       	mov	r23, r22
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__floatsisf+0x5e>
 8cc:	66 23       	and	r22, r22
 8ce:	71 f0       	breq	.+28     	; 0x8ec <__floatsisf+0x74>
 8d0:	96 e8       	ldi	r25, 0x86	; 134
 8d2:	86 2f       	mov	r24, r22
 8d4:	70 e0       	ldi	r23, 0x00	; 0
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	2a f0       	brmi	.+10     	; 0x8e4 <__floatsisf+0x6c>
 8da:	9a 95       	dec	r25
 8dc:	66 0f       	add	r22, r22
 8de:	77 1f       	adc	r23, r23
 8e0:	88 1f       	adc	r24, r24
 8e2:	da f7       	brpl	.-10     	; 0x8da <__floatsisf+0x62>
 8e4:	88 0f       	add	r24, r24
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__fp_inf>:
 8ee:	97 f9       	bld	r25, 7
 8f0:	9f 67       	ori	r25, 0x7F	; 127
 8f2:	80 e8       	ldi	r24, 0x80	; 128
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	08 95       	ret

000008fa <__fp_nan>:
 8fa:	9f ef       	ldi	r25, 0xFF	; 255
 8fc:	80 ec       	ldi	r24, 0xC0	; 192
 8fe:	08 95       	ret

00000900 <__fp_pscA>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	16 16       	cp	r1, r22
 906:	17 06       	cpc	r1, r23
 908:	18 06       	cpc	r1, r24
 90a:	09 06       	cpc	r0, r25
 90c:	08 95       	ret

0000090e <__fp_pscB>:
 90e:	00 24       	eor	r0, r0
 910:	0a 94       	dec	r0
 912:	12 16       	cp	r1, r18
 914:	13 06       	cpc	r1, r19
 916:	14 06       	cpc	r1, r20
 918:	05 06       	cpc	r0, r21
 91a:	08 95       	ret

0000091c <__fp_round>:
 91c:	09 2e       	mov	r0, r25
 91e:	03 94       	inc	r0
 920:	00 0c       	add	r0, r0
 922:	11 f4       	brne	.+4      	; 0x928 <__fp_round+0xc>
 924:	88 23       	and	r24, r24
 926:	52 f0       	brmi	.+20     	; 0x93c <__fp_round+0x20>
 928:	bb 0f       	add	r27, r27
 92a:	40 f4       	brcc	.+16     	; 0x93c <__fp_round+0x20>
 92c:	bf 2b       	or	r27, r31
 92e:	11 f4       	brne	.+4      	; 0x934 <__fp_round+0x18>
 930:	60 ff       	sbrs	r22, 0
 932:	04 c0       	rjmp	.+8      	; 0x93c <__fp_round+0x20>
 934:	6f 5f       	subi	r22, 0xFF	; 255
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <__fp_split3>:
 93e:	57 fd       	sbrc	r21, 7
 940:	90 58       	subi	r25, 0x80	; 128
 942:	44 0f       	add	r20, r20
 944:	55 1f       	adc	r21, r21
 946:	59 f0       	breq	.+22     	; 0x95e <__fp_splitA+0x10>
 948:	5f 3f       	cpi	r21, 0xFF	; 255
 94a:	71 f0       	breq	.+28     	; 0x968 <__fp_splitA+0x1a>
 94c:	47 95       	ror	r20

0000094e <__fp_splitA>:
 94e:	88 0f       	add	r24, r24
 950:	97 fb       	bst	r25, 7
 952:	99 1f       	adc	r25, r25
 954:	61 f0       	breq	.+24     	; 0x96e <__fp_splitA+0x20>
 956:	9f 3f       	cpi	r25, 0xFF	; 255
 958:	79 f0       	breq	.+30     	; 0x978 <__fp_splitA+0x2a>
 95a:	87 95       	ror	r24
 95c:	08 95       	ret
 95e:	12 16       	cp	r1, r18
 960:	13 06       	cpc	r1, r19
 962:	14 06       	cpc	r1, r20
 964:	55 1f       	adc	r21, r21
 966:	f2 cf       	rjmp	.-28     	; 0x94c <__fp_split3+0xe>
 968:	46 95       	lsr	r20
 96a:	f1 df       	rcall	.-30     	; 0x94e <__fp_splitA>
 96c:	08 c0       	rjmp	.+16     	; 0x97e <__fp_splitA+0x30>
 96e:	16 16       	cp	r1, r22
 970:	17 06       	cpc	r1, r23
 972:	18 06       	cpc	r1, r24
 974:	99 1f       	adc	r25, r25
 976:	f1 cf       	rjmp	.-30     	; 0x95a <__fp_splitA+0xc>
 978:	86 95       	lsr	r24
 97a:	71 05       	cpc	r23, r1
 97c:	61 05       	cpc	r22, r1
 97e:	08 94       	sec
 980:	08 95       	ret

00000982 <__fp_zero>:
 982:	e8 94       	clt

00000984 <__fp_szero>:
 984:	bb 27       	eor	r27, r27
 986:	66 27       	eor	r22, r22
 988:	77 27       	eor	r23, r23
 98a:	cb 01       	movw	r24, r22
 98c:	97 f9       	bld	r25, 7
 98e:	08 95       	ret

00000990 <__mulsf3>:
 990:	0b d0       	rcall	.+22     	; 0x9a8 <__mulsf3x>
 992:	c4 cf       	rjmp	.-120    	; 0x91c <__fp_round>
 994:	b5 df       	rcall	.-150    	; 0x900 <__fp_pscA>
 996:	28 f0       	brcs	.+10     	; 0x9a2 <__mulsf3+0x12>
 998:	ba df       	rcall	.-140    	; 0x90e <__fp_pscB>
 99a:	18 f0       	brcs	.+6      	; 0x9a2 <__mulsf3+0x12>
 99c:	95 23       	and	r25, r21
 99e:	09 f0       	breq	.+2      	; 0x9a2 <__mulsf3+0x12>
 9a0:	a6 cf       	rjmp	.-180    	; 0x8ee <__fp_inf>
 9a2:	ab cf       	rjmp	.-170    	; 0x8fa <__fp_nan>
 9a4:	11 24       	eor	r1, r1
 9a6:	ee cf       	rjmp	.-36     	; 0x984 <__fp_szero>

000009a8 <__mulsf3x>:
 9a8:	ca df       	rcall	.-108    	; 0x93e <__fp_split3>
 9aa:	a0 f3       	brcs	.-24     	; 0x994 <__mulsf3+0x4>

000009ac <__mulsf3_pse>:
 9ac:	95 9f       	mul	r25, r21
 9ae:	d1 f3       	breq	.-12     	; 0x9a4 <__mulsf3+0x14>
 9b0:	95 0f       	add	r25, r21
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	55 1f       	adc	r21, r21
 9b6:	62 9f       	mul	r22, r18
 9b8:	f0 01       	movw	r30, r0
 9ba:	72 9f       	mul	r23, r18
 9bc:	bb 27       	eor	r27, r27
 9be:	f0 0d       	add	r31, r0
 9c0:	b1 1d       	adc	r27, r1
 9c2:	63 9f       	mul	r22, r19
 9c4:	aa 27       	eor	r26, r26
 9c6:	f0 0d       	add	r31, r0
 9c8:	b1 1d       	adc	r27, r1
 9ca:	aa 1f       	adc	r26, r26
 9cc:	64 9f       	mul	r22, r20
 9ce:	66 27       	eor	r22, r22
 9d0:	b0 0d       	add	r27, r0
 9d2:	a1 1d       	adc	r26, r1
 9d4:	66 1f       	adc	r22, r22
 9d6:	82 9f       	mul	r24, r18
 9d8:	22 27       	eor	r18, r18
 9da:	b0 0d       	add	r27, r0
 9dc:	a1 1d       	adc	r26, r1
 9de:	62 1f       	adc	r22, r18
 9e0:	73 9f       	mul	r23, r19
 9e2:	b0 0d       	add	r27, r0
 9e4:	a1 1d       	adc	r26, r1
 9e6:	62 1f       	adc	r22, r18
 9e8:	83 9f       	mul	r24, r19
 9ea:	a0 0d       	add	r26, r0
 9ec:	61 1d       	adc	r22, r1
 9ee:	22 1f       	adc	r18, r18
 9f0:	74 9f       	mul	r23, r20
 9f2:	33 27       	eor	r19, r19
 9f4:	a0 0d       	add	r26, r0
 9f6:	61 1d       	adc	r22, r1
 9f8:	23 1f       	adc	r18, r19
 9fa:	84 9f       	mul	r24, r20
 9fc:	60 0d       	add	r22, r0
 9fe:	21 1d       	adc	r18, r1
 a00:	82 2f       	mov	r24, r18
 a02:	76 2f       	mov	r23, r22
 a04:	6a 2f       	mov	r22, r26
 a06:	11 24       	eor	r1, r1
 a08:	9f 57       	subi	r25, 0x7F	; 127
 a0a:	50 40       	sbci	r21, 0x00	; 0
 a0c:	8a f0       	brmi	.+34     	; 0xa30 <__mulsf3_pse+0x84>
 a0e:	e1 f0       	breq	.+56     	; 0xa48 <__mulsf3_pse+0x9c>
 a10:	88 23       	and	r24, r24
 a12:	4a f0       	brmi	.+18     	; 0xa26 <__mulsf3_pse+0x7a>
 a14:	ee 0f       	add	r30, r30
 a16:	ff 1f       	adc	r31, r31
 a18:	bb 1f       	adc	r27, r27
 a1a:	66 1f       	adc	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	91 50       	subi	r25, 0x01	; 1
 a22:	50 40       	sbci	r21, 0x00	; 0
 a24:	a9 f7       	brne	.-22     	; 0xa10 <__mulsf3_pse+0x64>
 a26:	9e 3f       	cpi	r25, 0xFE	; 254
 a28:	51 05       	cpc	r21, r1
 a2a:	70 f0       	brcs	.+28     	; 0xa48 <__mulsf3_pse+0x9c>
 a2c:	60 cf       	rjmp	.-320    	; 0x8ee <__fp_inf>
 a2e:	aa cf       	rjmp	.-172    	; 0x984 <__fp_szero>
 a30:	5f 3f       	cpi	r21, 0xFF	; 255
 a32:	ec f3       	brlt	.-6      	; 0xa2e <__mulsf3_pse+0x82>
 a34:	98 3e       	cpi	r25, 0xE8	; 232
 a36:	dc f3       	brlt	.-10     	; 0xa2e <__mulsf3_pse+0x82>
 a38:	86 95       	lsr	r24
 a3a:	77 95       	ror	r23
 a3c:	67 95       	ror	r22
 a3e:	b7 95       	ror	r27
 a40:	f7 95       	ror	r31
 a42:	e7 95       	ror	r30
 a44:	9f 5f       	subi	r25, 0xFF	; 255
 a46:	c1 f7       	brne	.-16     	; 0xa38 <__mulsf3_pse+0x8c>
 a48:	fe 2b       	or	r31, r30
 a4a:	88 0f       	add	r24, r24
 a4c:	91 1d       	adc	r25, r1
 a4e:	96 95       	lsr	r25
 a50:	87 95       	ror	r24
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
